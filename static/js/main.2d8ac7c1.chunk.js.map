{"version":3,"sources":["components/Cards/Cards.module.css","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","components/Cards/Cards.jsx","App.js","serviceWorker.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png"],"names":["module","exports","url","fetchData","country","a","changeableUrl","axios","get","data","modifiedData","confirmed","recovered","deaths","lastUpdate","fetchDailyData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","console","log","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","value","options","legend","display","title","text","className","styles","container","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","Cards","Grid","spacing","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","Date","toDateString","App","state","fetchedData","setState","this","src","covidImg","image","alt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2d8ac7c1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import axios from 'axios';\n\nconst url = 'https://covid19.mathdro.id/api';\n\nexport const fetchData = async (country) => {\n\n  let changeableUrl = url;\n\n  if(country) {\n    changeableUrl = `${url}/countries/${country}`;\n  }\n\n  // const fetchedData = await fetchData(country);\n\n  try{\n    const {data} = await axios.get(changeableUrl);\n    const modifiedData = {\n      confirmed: data.confirmed,\n      recovered: data.recovered,\n      deaths: data.deaths,\n      lastUpdate: data.lastUpdate,\n    }\n    return modifiedData;\n  } catch(error) {\n\n  }\n}\n\nexport const fetchDailyData = async () => {\n  try {\n    const { data } = await axios.get(`${url}/daily`);    \n    const modifiedData = data.map((dailyData) => ({\n      confirmed: dailyData.confirmed.total,\n      deaths: dailyData.deaths.total,\n      date: dailyData.reportDate\n    }));\n    return modifiedData;\n  } catch(error) {\n  }\n}\n\nexport const fetchCountries = async () => {\n  try {\n    const {data: {countries}} = await axios.get(`${url}/countries`);\n    return countries.map(country => country.name);\n\n  } catch (error) {}\n}","import React, { useState, useEffect } from 'react';\nimport { fetchDailyData } from '../../api';\nimport { Line, Bar } from 'react-chartjs-2';\nimport styles from './Chart.module.css';\n\nconst Chart = ({ data, country }) => {\n\tconst [ dailyData, setDailyData ] = useState([]);\n\n\tuseEffect(() => {\n\t\tconst fetchAPI = async () => {\n\t\t\tsetDailyData(await fetchDailyData());\n\t\t};\n\t\tconsole.log(dailyData);\n    fetchAPI();\n\t}, []);\n\n\tconst lineChart = dailyData.length ? (\n\t\t<Line\n\t\t\tdata={{\n\t\t\t\tlabels: dailyData.map(({ date }) => date),\n\t\t\t\tdatasets: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdata: dailyData.map(({ confirmed }) => confirmed),\n\t\t\t\t\t\tlabel: 'Infected',\n\t\t\t\t\t\tborderColor: '#3333ff',\n\t\t\t\t\t\tfill: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdata: dailyData.map(({ deaths }) => deaths),\n\t\t\t\t\t\tlabel: 'Deaths',\n\t\t\t\t\t\tborderColor: 'red',\n\t\t\t\t\t\tbackgroundColor: 'rgba(255, 0, 0, 0.5)',\n\t\t\t\t\t\tfill: true\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}}\n\t\t/>\n\t) : null;\n\n\tconst barChart = data.confirmed ? (\n\t\t<Bar\n\t\t\tdata={{\n\t\t\t\tlabels: [ 'Infected', 'Recovered', 'Deaths' ],\n\t\t\t\tdatasets: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'people',\n\t\t\t\t\t\tbackgroundColor: [ 'rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)' ],\n            data: [data.confirmed.value, data.recovered.value, data.deaths.value]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}}\n\t\t\toptions={{\n\t\t\t\tlegend: { display: false },\n\t\t\t\ttitle: { display: true, text: `Current state in ${country}` }\n\t\t\t}}\n\t\t/>\n\t) : null;\n\n\treturn <div className={styles.container}>{country ? barChart : lineChart}</div>;\n};\n\nexport default Chart;\n","import React, { useEffect, useState } from 'react';\nimport {NativeSelect, FormControl} from '@material-ui/core';\nimport {fetchCountries} from '../../api'\nimport styles from './CountryPicker.module.css'\n\nconst CountryPicker = ({handleCountryChange}) => {\n  const [fetchedCountries, setFetchedCountries] = useState([]);\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setFetchedCountries(await fetchCountries())\n    }\n\n    fetchAPI();\n  }, [setFetchedCountries])\n\n  return (\n    <FormControl className={styles.formControl}>\n      <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\n      <option value=\"\">Global</option>\n        {fetchedCountries.map((country, i) => {\n          return <option value={country} key={i}>{country}</option>\n        })}\n      </NativeSelect>\n    </FormControl>\n  )\n}\n\nexport default CountryPicker;","import React from 'react';\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\n\nimport cx from 'classnames';\nimport styles from './Cards.module.css';\nimport CountUp from 'react-countup';\n\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n\tif (!confirmed) {\n\t\treturn 'Loading...';\n\t}\n\treturn (\n\t\t<div className={styles.container}>\n\t\t\t<Grid container spacing={3}>\n\t\t\t\t<Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\n\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t<Typography color=\"textSecondary\" gutterBottom>\n\t\t\t\t\t\t\tInfected\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t<Typography variant=\"h5\">\n\t\t\t\t\t\t\t<CountUp start={0} end={confirmed.value} duration={2.5} separator=\",\" />\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t<Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n\t\t\t\t\t\t<Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\n\t\t\t\t\t</CardContent>\n\t\t\t\t</Grid>\n\n\t\t\t\t<Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\n\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t<Typography color=\"textSecondary\" gutterBottom>\n\t\t\t\t\t\t\tRecovered\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t<Typography variant=\"h5\">\n              <CountUp start={0} end={recovered.value} duration={2.5} separator=\",\" />\n            </Typography>\n\t\t\t\t\t\t<Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n\t\t\t\t\t\t<Typography variant=\"body2\">Number of recoveries of COVID-19</Typography>\n\t\t\t\t\t</CardContent>\n\t\t\t\t</Grid>\n\n\t\t\t\t<Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\n\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t<Typography color=\"textSecondary\" gutterBottom>\n\t\t\t\t\t\t\tDeaths\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t<Typography variant=\"h5\">\n              <CountUp start={0} end={deaths.value} duration={2.5} separator=\",\" />\n            </Typography>\n\t\t\t\t\t\t<Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n\t\t\t\t\t\t<Typography variant=\"body2\">Number of deaths caused by COVID-19</Typography>\n\t\t\t\t\t</CardContent>\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t</div>\n\t);\n};\n\nexport default Cards;\n","import React from 'react';\nimport styles from './App.module.css';\nimport { fetchData } from './api';\nimport {Cards, Chart, CountryPicker} from './components';\nimport covidImg from './images/image.png';\n\nclass App extends React.Component{\n\n  state = {\n    data: {},\n    country: ''\n  }\n\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n    this.setState({data: fetchedData})\n  }\n\n  handleCountryChange = async (country) => {\n    // fetch data\n    const fetchedData = await fetchData(country);\n    this.setState({data: fetchedData, country:  country})\n    // set the state\n  }\n\n  render() {\n    const {data, country} = this.state;\n    return (\n      <div className={styles.container}>\n      <img src={covidImg} className={styles.image} alt=\"\" />\n      <Cards data={data} />\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <Chart data={data} country={country} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}